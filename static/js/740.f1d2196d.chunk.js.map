{"version":3,"file":"static/js/740.f1d2196d.chunk.js","mappings":"gPAEaA,EAAWC,EAAAA,GAAAA,GAAH,sFAMRC,EAAUD,EAAAA,GAAAA,IAAH,2DAKPE,EAAQF,EAAAA,GAAAA,IAAH,+EAMLG,EAAYH,EAAAA,GAAAA,GAAH,kEACT,SAAAI,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,IAA0B,SAAAF,GAAC,OAAIA,EAAEC,MAAMC,MAAM,EAAlB,I,mBChB5BP,EAAW,SAAC,GACvB,OADoC,EAAXQ,KACbC,KAAI,gBAAGC,EAAH,EAAGA,KAAMC,EAAT,EAASA,aAAcC,EAAvB,EAAuBA,UAAvB,OACd,UAAC,EAAD,YACE,SAAC,EAAD,WACE,SAAC,EAAD,CACEC,IACEF,EAAY,yCAC0BA,GAClCG,EAENC,IAAKL,OAGT,SAAC,EAAD,UAAeA,MAXCE,EADJ,GAejB,E,wCCOD,EAnBa,WACX,IAAQI,GAAYC,EAAAA,EAAAA,MAAZD,QACR,GAA8BE,EAAAA,EAAAA,GAAoBC,EAAAA,GAAS,OAAQH,GAAnE,eAAOR,EAAP,KAAaY,EAAb,KAAqBC,EAArB,KAEA,OACE,gCACc,YAAXD,IAAwB,SAACE,EAAA,EAAD,IACb,aAAXF,IACC,8BACE,SAACG,EAAA,EAAD,CAAKC,GAAG,KAAKC,QAAQ,OAAOC,QAAS,EAAGC,SAAS,OAAOC,GAAI,EAA5D,UACE,SAAC5B,EAAD,CAAUQ,KAAMA,QAIV,aAAXY,IAAyB,SAACS,EAAA,EAAD,CAASC,QAAST,EAAMS,YAGvD,C","sources":["components/CastCard/CastCard.styled.js","components/CastCard/CastCard.js","components/Cast/Cast.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastCard = styled.li`\n  width: 300px;\n  display: flex;\n  flex-direction: column;\n`;\n\nexport const ImgWrap = styled.div`\n  width: 300px;\n  height: 450px;\n`;\n\nexport const Image = styled.img`\n  width: 100%;\n  height: 100%;\n  object-fit: cover;\n`;\n\nexport const ActorName = styled.h3`\n  padding: ${p => p.theme.space[4]}px ${p => p.theme.space[3]}px;\n  flex-grow: 1;\n`;\n","import * as SC from './CastCard.styled';\nimport PropTypes from 'prop-types';\nimport img from '../../img/noUserProfile.webp';\n\nexport const CastCard = ({ cast }) => {\n  return cast.map(({ name, profile_path, credit_id }) => (\n    <SC.CastCard key={credit_id}>\n      <SC.ImgWrap>\n        <SC.Image\n          src={\n            profile_path\n              ? `https://image.tmdb.org/t/p/w500${profile_path}`\n              : img\n          }\n          alt={name}\n        />\n      </SC.ImgWrap>\n      <SC.ActorName>{name}</SC.ActorName>\n    </SC.CastCard>\n  ));\n};\n\nCastCard.propTypes = {\n  cast: PropTypes.arrayOf(\n    PropTypes.shape({\n      name: PropTypes.string,\n      profile_path: PropTypes.string,\n      credit_id: PropTypes.string.isRequired,\n    })\n  ),\n};\n","import { useParams } from 'react-router-dom';\nimport { getCast } from 'Api/Api';\nimport { CastCard } from 'components/CastCard/CastCard';\nimport { Message } from 'components/Message/Message';\nimport { Loader } from 'components/Loader/Loader';\nimport { useGetArreyDataPage } from 'Hooks/useGetArreyDataPage';\nimport { Box } from 'components/Box/Box';\n\nconst Cast = () => {\n  const { movieId } = useParams();\n  const [cast, status, error] = useGetArreyDataPage(getCast, 'cast', movieId);\n\n  return (\n    <>\n      {status === 'pending' && <Loader />}\n      {status === 'resolved' && (\n        <section>\n          <Box as=\"ul\" display=\"flex\" gridGap={4} flexWrap=\"wrap\" py={4}>\n            <CastCard cast={cast} />\n          </Box>\n        </section>\n      )}\n      {status === 'rejected' && <Message message={error.message} />}\n    </>\n  );\n};\n\nexport default Cast;\n"],"names":["CastCard","styled","ImgWrap","Image","ActorName","p","theme","space","cast","map","name","profile_path","credit_id","src","img","alt","movieId","useParams","useGetArreyDataPage","getCast","status","error","Loader","Box","as","display","gridGap","flexWrap","py","Message","message"],"sourceRoot":""}